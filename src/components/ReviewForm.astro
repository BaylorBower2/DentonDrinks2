---
interface Props {
  venueId: string;
}

const { venueId } = Astro.props;
---

<form 
  class="space-y-6 mt-8 bg-dark-card p-6 rounded-lg shadow-lg border border-dark-border"
  id="reviewForm"
  data-venue-id={venueId}
  enctype="multipart/form-data"
>
  <div>
    <label class="block text-sm font-medium text-gray-300">Rating</label>
    <div class="flex space-x-2 mt-1">
      {[1, 2, 3, 4, 5].map((num) => (
        <label class="cursor-pointer">
          <input 
            type="radio" 
            name="rating" 
            value={num} 
            class="peer sr-only" 
            required
          />
          <svg
            class="w-8 h-8 text-gray-600 hover:text-secondary/50 peer-checked:text-secondary transition-colors"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
          </svg>
        </label>
      ))}
    </div>
  </div>

  <div>
    <label for="comment" class="block text-sm font-medium text-gray-300">Review</label>
    <textarea
      id="comment"
      name="comment"
      rows="4"
      required
      minlength="10"
      class="mt-1 block w-full rounded-md bg-dark-surface border-dark-border text-gray-100 shadow-sm focus:border-secondary focus:ring-secondary"
      placeholder="Share your experience (minimum 10 characters)..."
    ></textarea>
  </div>

  <div>
    <label for="image" class="block text-sm font-medium text-gray-300">Add a photo (optional)</label>
    <input
      type="file"
      id="image"
      name="image"
      accept="image/jpeg,image/png,image/webp"
      class="mt-1 block w-full text-gray-400
        file:mr-4 file:py-2 file:px-4
        file:rounded-md file:border-0
        file:text-sm file:font-semibold
        file:bg-secondary/10 file:text-secondary
        hover:file:bg-secondary/20
        file:cursor-pointer cursor-pointer"
    />
    <p class="text-sm text-gray-500 mt-1">
      Accepted formats: JPEG, PNG, WebP. Maximum size: 5MB
    </p>
  </div>

  <button
    type="submit"
    class="w-full bg-secondary text-white px-4 py-2 rounded-md hover:bg-secondary-light focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-dark-bg disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
    id="submitButton"
  >
    Submit Review
  </button>

  <div id="errorMessage" class="hidden text-red-400 text-sm mt-2"></div>
  <div id="retryMessage" class="hidden text-yellow-400 text-sm mt-2">
    Retrying submission...
  </div>
</form>

<script>
const form = document.getElementById('reviewForm') as HTMLFormElement;
const submitButton = document.getElementById('submitButton') as HTMLButtonElement;
const errorMessage = document.getElementById('errorMessage') as HTMLDivElement;
const retryMessage = document.getElementById('retryMessage') as HTMLDivElement;

if (form && submitButton && errorMessage && retryMessage) {
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    submitButton.disabled = true;
    submitButton.textContent = 'Submitting...';
    errorMessage.classList.add('hidden');
    retryMessage.classList.add('hidden');

    try {
      const formData = new FormData();
      formData.append('venueId', form.dataset.venueId || '');
      
      const ratingInput = form.querySelector('input[name="rating"]:checked') as HTMLInputElement;
      if (!ratingInput) throw new Error('Please select a rating');
      formData.append('rating', ratingInput.value);
      
      const commentInput = form.querySelector('#comment') as HTMLTextAreaElement;
      if (!commentInput.value.trim()) throw new Error('Please enter a review comment');
      formData.append('comment', commentInput.value.trim());
      
      const imageInput = form.querySelector('#image') as HTMLInputElement;
      if (imageInput.files?.length) {
        const file = imageInput.files[0];
        if (file.size > 5 * 1024 * 1024) {
          throw new Error('Image file size must be less than 5MB');
        }
        if (!['image/jpeg', 'image/png', 'image/webp'].includes(file.type)) {
          throw new Error('Please upload a JPEG, PNG, or WebP image');
        }
        formData.append('image', file);
      }

      const response = await fetch('/api/reviews', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        const result = await response.json();
        throw new Error(result.error || 'Failed to submit review');
      }

      window.location.href = '/reviews?success=true';
    } catch (error) {
      console.error('Error:', error);
      submitButton.disabled = false;
      submitButton.textContent = 'Submit Review';
      errorMessage.textContent = error instanceof Error ? error.message : 'Failed to submit review';
      errorMessage.classList.remove('hidden');
    }
  });
}
</script>